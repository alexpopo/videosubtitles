1
00:00:01,000 --> 00:00:02,060
大家好。

2
00:00:02,060 --> 00:00:08,340
在本视频中，我将向您展示如何使用 Automatic1111 Web UI 将您的主题（在本例中是我的脸）

3
00:00:08,340 --> 00:00:13,200
注入到任何自定义模型中。

4
00:00:13,200 --> 00:00:17,900
所以你看，中心图像是我的原始
图像，其他图像是

5
00:00:17,900 --> 00:00:22,609
使用这个注入模型生成的，它是 Protegen x3.4。

6
00:00:22,609 --> 00:00:26,320
这是生成超逼真图片的绝佳模型。

7
00:00:26,320 --> 00:00:28,890
这是官方网站。

8
00:00:28,890 --> 00:00:33,140
所以如果你不知道如何使用 Automatic1111，我有很棒的教程。

9
00:00:33,140 --> 00:00:40,250
首先，我在本视频中展示了如何安装和运行 Automatic 1111。

10
00:00:40,250 --> 00:00:45,730
我在本视频中展示了如何将不同模型
与 Automatic1111 结合使用。

11
00:00:45,730 --> 00:00:51,460
最近我发布的视频展示了如何
训练你的主题，例如 你的脸

12
00:00:51,460 --> 00:00:56,410
或任何东西，通过使用自动 1111 和 DreamBooth 扩展。

13
00:00:56,410 --> 00:01:01,329
如果你的显卡不是很好但可以支持LoRA训练，那么我

14
00:01:01,329 --> 00:01:04,589
在这个视频中展示了如何进行LoRA训练。

15
00:01:04,589 --> 00:01:11,540
即使您仍然无法
使用 LoRA 训练您的对象，如果您仍然

16
00:01:11,540 --> 00:01:14,430
没有像样的显卡，也不要担心。

17
00:01:14,430 --> 00:01:20,810
我已经展示了如何使用 Google Colab 来教授
你的主题，然后你可以

18
00:01:20,810 --> 00:01:26,360
在 Google Colab 上生成 ckpt 文件，下载它并可以
在 Automatic1111 web UI 上使用它。

19
00:01:26,360 --> 00:01:31,730
在本视频中，我展示了如何
在 Google Colab 上使用自定义模型进行训练。

20
00:01:31,730 --> 00:01:33,220
现在我们可以开始了。

21
00:01:33,220 --> 00:01:36,979
顺便说一下，我会将所有这些视频
链接放入说明中，它们都

22
00:01:36,979 --> 00:01:38,259
可以在我们的频道中找到。

23
00:01:38,259 --> 00:01:42,990
转到我们的频道主页，在这里您
会看到 Stable Diffusion DreamBooth 播放列表，

24
00:01:42,990 --> 00:01:45,810
所有内容都可以在这里找到。

25
00:01:45,810 --> 00:01:48,090
我还将把这个链接放到描述中。

26
00:01:48,090 --> 00:01:49,890
好的，现在我们可以开始了。

27
00:01:49,890 --> 00:01:57,189
所以目前选择的模型是我
在上一个视频中训练的模型。

28
00:01:57,189 --> 00:02:00,479
我用 12 张图片训练了我的脸。

29
00:02:00,479 --> 00:02:03,340
这就是训练数据集。

30
00:02:03,340 --> 00:02:09,500
如果你想知道使用了什么样的数据集
，它是一个非常简单和小的数据

31
00:02:09,500 --> 00:02:12,819
集：只有 12 张图像。

32
00:02:12,819 --> 00:02:16,550
OK，这是训练模型
可以生成的图像。

33
00:02:16,550 --> 00:02:21,920
对了，训练模型是基于
SD 1.5正式版的。

34
00:02:21,920 --> 00:02:25,120
你看，这实际上是一种非常糟糕的品质。

35
00:02:25,120 --> 00:02:31,630
因此，要
在默认的 SD 1.5 版本数据集上获得非常好的、非常高质量的图像，您

36
00:02:31,630 --> 00:02:38,240
必须生成大量图像，并且
必须进行大量提示尝试。

37
00:02:38,240 --> 00:02:43,870
所以你看，这实际上是一个非常简单的提示
，这也是一个非常简单的

38
00:02:43,870 --> 00:02:45,209
否定提示。

39
00:02:45,209 --> 00:02:52,319
那么我们如何将训练好的
模型注入自定义模型。

40
00:02:52,319 --> 00:02:57,530
首先，作为主要模型，我们将
选择目标模型，

41
00:02:57,530 --> 00:03:00,860
在本例中为 Protegen x3.4。

42
00:03:00,860 --> 00:03:03,970
照片写实模型，非常高质量的
模型。

43
00:03:03,970 --> 00:03:10,560
我从这个下拉框中选择了它：
Protegen x3.4，官方。

44
00:03:10,560 --> 00:03:18,330
然后二级模型将是
我们将提取训练对象的模型，

45
00:03:18,330 --> 00:03:23,530
即 web ui ohwx，我的面部训练模型。

46
00:03:23,530 --> 00:03:27,430
好的，让我选择它。

47
00:03:27,430 --> 00:03:28,540
和三级模型。

48
00:03:28,540 --> 00:03:30,890
那么什么是三级模型呢？

49
00:03:30,890 --> 00:03:37,799
我们将要使用的策略是这样的：
所以基础模型，也就是三级模型，

50
00:03:37,799 --> 00:03:38,799
模型C 。

51
00:03:38,799 --> 00:03:43,849
在基础模型中，我们将选择
用于训练对象的基础模型，

52
00:03:43,849 --> 00:03:48,210
即版本 1.5 Pruned ckpt。

53
00:03:48,210 --> 00:03:53,659
而训练好的模型是模型B，也就是
Web UI owhx，目标模型是模型

54
00:03:53,659 --> 00:04:02,349
A。那么我们要做的就是
从模型B中减去模型C。

55
00:04:02,349 --> 00:04:04,130
剩下的会是什么？

56
00:04:04,130 --> 00:04:06,890
只剩下我们训练有素的对象。

57
00:04:06,890 --> 00:04:14,120
好的，因为我们已经训练了我们的主题，在
我的例子中是我的脸，我们现在训练有素的

58
00:04:14,120 --> 00:04:19,548
模型有我的脸，其余的
应该与基础模型相同。

59
00:04:19,548 --> 00:04:25,900
然后我们将把我们的脸注入
我们的目标模型，即 Protegen。

60
00:04:25,900 --> 00:04:27,720
那我们要怎么做呢？

61
00:04:27,720 --> 00:04:29,600
首先，我们需要定义一个自定义名称。

62
00:04:29,600 --> 00:04:35,690
Protegen，我会这样说我的脸：如此
倍增。

63
00:04:35,690 --> 00:04:38,970
我们想要什么样的模型？

64
00:04:38,970 --> 00:04:43,210
这决定了我们注入的强度。

65
00:04:43,210 --> 00:04:50,020
对于面孔，社区建议使用 75%，即
零点七十五。

66
00:04:50,020 --> 00:04:56,910
我做了很多测试，我发现
对于我的特定训练模型，95% 的

67
00:04:56,910 --> 00:04:58,770
效果更好。

68
00:04:58,770 --> 00:05:01,960
然后你在这里选择添加差异，而
不是加权和。

69
00:05:01,960 --> 00:05:08,220
我们将使用 add selected add difference，
因为这是我们将要

70
00:05:08,220 --> 00:05:11,130
使用和生成 ckpt 的策略。

71
00:05:11,130 --> 00:05:15,759
你不需要另存为float16 直接点击
运行即可。

72
00:05:15,759 --> 00:05:17,069
好的。

73
00:05:17,069 --> 00:05:22,300
在 CMD 窗口中，您将看到它正在
加载模型，然后生成目标

74
00:05:22,300 --> 00:05:26,640
模型，如下所示：My face protogen ckpt and
the checkpoint saved。

75
00:05:26,640 --> 00:05:32,270
现在让我们回到文本图像选项卡并单击
刷新。

76
00:05:32,270 --> 00:05:36,380
现在我们可以看到我的脸 protogen ckpt。

77
00:05:36,380 --> 00:05:38,050
好的。

78
00:05:38,050 --> 00:05:42,020
现在让我们生成一个图像，看看
我们将获得什么样的质量。

79
00:05:42,020 --> 00:05:45,050
好的，这就是我们得到的质量。

80
00:05:45,050 --> 00:05:50,770
只需尝试一下，您就可以生成数百张
图像并生成质量更高的

81
00:05:50,770 --> 00:05:51,770
图像。

82
00:05:51,770 --> 00:05:56,569
眼睛颜色不匹配，因此我
应该在这里添加棕色眼睛。

83
00:05:56,569 --> 00:05:59,009
但有几个关键问题。

84
00:05:59,009 --> 00:06:06,750
第一个关键问题是，我是如何
得出这个提示强度 1.4 以及如何

85
00:06:06,750 --> 00:06:09,349
选择 CFG 值的？

86
00:06:09,349 --> 00:06:10,349
要做到这一点。

87
00:06:10,349 --> 00:06:11,349
这很容易。

88
00:06:11,349 --> 00:06:18,229
首先，让我们在这里定义一个权重，
weight_val，如您所见： 好的，

89
00:06:18,229 --> 00:06:23,699
这将是我们将要
使用的关键字，对于 CFG 值，我们将在此处设置它。

90
00:06:23,699 --> 00:06:27,750
所以我要进行 X/Y 绘图。

91
00:06:27,750 --> 00:06:31,030
所以在第一个值中，我将选择
CFG。

92
00:06:31,030 --> 00:06:40,300
为
新生成的化合物或注射

93
00:06:40,300 --> 00:06:41,300
模型找到最佳 CFG 和重量值。

94
00:06:41,300 --> 00:06:49,449
你应该制作一个 X/Y 图，看看哪个
能为你产生最好的结果。

95
00:06:49,449 --> 00:06:54,910
对于 Y 值，我们将使用提示
SR，就像这样。

96
00:06:54,910 --> 00:06:58,990
在这里，我们将把它作为
关键字。

97
00:06:58,990 --> 00:07:10,960
然后我们要设置提示强度，
像1.0、1.1、1.2，像这样，然后是1.3。

98
00:07:10,960 --> 00:07:15,259
好的，1.4。

99
00:07:15,259 --> 00:07:23,160
好吧，那就不要勾选这个框，因为
我们要比较提示

100
00:07:23,160 --> 00:07:24,860
强度和CFG值的效果。

101
00:07:24,860 --> 00:07:28,540
因此，不要为种子选中 keep -1。

102
00:07:28,540 --> 00:07:34,330
例如，让我们选择批量大小为
4，它会加速，如果您的显卡 VRAM

103
00:07:34,330 --> 00:07:35,569
足够。

104
00:07:35,569 --> 00:07:41,479
我认为这应该足以
查看比较结果并查看权

105
00:07:41,479 --> 00:07:49,199
重和 CFG 值中哪一个
在我们新生成的模型上表现最好。

106
00:07:49,199 --> 00:07:54,599
结果生成后，只需比较
它们，看看 CFG 值和

107
00:07:54,599 --> 00:08:02,220
权重中哪一个产生了最好的结果，然后
您可以在提示中使用该权重值，

108
00:08:02,220 --> 00:08:04,669
并在提示中使用 CFG 值。

109
00:08:04,669 --> 00:08:13,199
因此，此方法适用于
使用与您所用的基本模型版本相同的任何自定义模型

110
00:08:13,199 --> 00:08:14,860
正如您正在使用的。

111
00:08:14,860 --> 00:08:22,419
因此，如果模型是在 1.5 版上训练的
，并且如果您的自定义模型的主题

112
00:08:22,419 --> 00:08:26,580
具有在 1.5 版上训练的模型，那么
它应该可以工作。

113
00:08:26,580 --> 00:08:31,949
您可以在此处尝试不同的权重值
以查看其性能，并且您应该在

114
00:08:31,949 --> 00:08:37,000
此处尝试不同的权重值和 CFG
值，正如我刚刚展示的 CFG

115
00:08:37,000 --> 00:08:38,000
方案。

116
00:08:38,000 --> 00:08:44,039
所以你看到它需要两个小时来生成
为什么它会生成这些

117
00:08:44,039 --> 00:08:46,050
和批量大小 4 的组合。

118
00:08:46,050 --> 00:08:53,900
如果我们计算我们得到 12 乘以 11
网格，它会产生 12 乘以 11

119
00:08:53,900 --> 00:08:59,110
网格然后它在每一代中它会
生成 4 张图像。

120
00:08:59,110 --> 00:09:07,010
所以总的来说，它会
像这样乘以 528 张图像，在它们之间你将

121
00:09:07,010 --> 00:09:08,779
能够理解。

122
00:09:08,779 --> 00:09:11,300
所以这就是这个视频的全部内容。

123
00:09:11,300 --> 00:09:15,040
如果你想支持我们，你可以
在 Patreon 上成为我们的赞助人。

124
00:09:15,040 --> 00:09:22,640
请订阅、点赞、分享并在评论中写下
您接下来想看到的内容

125
00:09:22,640 --> 00:09:23,640
接下来。

126
00:09:23,640 --> 00:09:28,960
您也可以
从我们频道的“关于”页面加入我们的官方 Discord 频道，然后

127
00:09:28,960 --> 00:09:31,650
单击官方 Discord 频道。

128
00:09:31,650 --> 00:09:33,250
到目前为止，我们有 4 位顾客。

129
00:09:33,250 --> 00:09:35,510
我非常感谢他们。

130
00:09:35,510 --> 00:09:39,180
这使我们能够制作更多高质量的
视频。

131
00:09:39,180 --> 00:09:46,350
而且，正如我所说，只需转到播放列表并
查看我们稳定传播的播放列表。

132
00:09:46,350 --> 00:09:47,380
一切都在这里。

133
00:09:47,380 --> 00:09:51,529
我还将把这个视频和下一个视频
也放在这里。

134
00:09:51,529 --> 00:09:52,529
非常感谢。

135
00:09:52,529 --> 00:09:53,370
希望以后再见。

